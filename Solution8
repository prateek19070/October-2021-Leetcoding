// Implement Trie (Prefix Tree)

class Trie {
    private final TrieNode root = new TrieNode();

    public void insert(String word) {
        TrieNode node = root;
        for (int i = 0; i < word.length(); i++) {
            node = node.put(word.charAt(i));
        }
        node.isWord = true;
    }
    
    public boolean search(String word) {
        TrieNode prefix = searchPrefix(word);
        return prefix != null && prefix.isWord;
    }
    
    public boolean startsWith(String prefix) {
        return searchPrefix(prefix) != null;
    }
    
    private TrieNode searchPrefix(String prefix) {
        TrieNode node = root;
        for (int i = 0; i < prefix.length() && node != null; i++) {
            node = node.get(prefix.charAt(i));
        }
        return node;
    }
}

class TrieNode {
    private Map<Character, TrieNode> children = new HashMap<>();
    boolean isWord;
    
    public TrieNode put(char c) {
        return children.computeIfAbsent(c, k -> new TrieNode());
    }
    
    public TrieNode get(char c) {
        return children.get(c);
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */
